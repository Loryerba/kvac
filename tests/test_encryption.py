import kvac


UID_SYSTEM_HARDCODED = [
    0xa6, 0x32, 0x4c, 0x36, 0x8d, 0xf7, 0x34, 0x69, 0x11, 0x47, 0x98, 0x13, 0x48, 0xb6, 0xe7,
    0xeb, 0x42, 0xc3, 0x30, 0x7e, 0x71, 0x1b, 0x6c, 0x7e, 0xcc, 0xd3, 0x3, 0x2d, 0x45, 0x69,
    0x3f, 0x5a, 0x4, 0x80, 0x13, 0x52, 0x5b, 0x76, 0x12, 0x4b, 0xf2, 0x64, 0xc, 0x5e, 0x93,
    0x69, 0xc7, 0x6e, 0xfb, 0xe8, 0xa, 0xba, 0x2a, 0x24, 0xaa, 0x5d, 0x8e, 0x18, 0xa9, 0x8e,
    0xba, 0x14, 0xf8, 0x37,
]


def test_uid_encryption():
    master_key = bytes(kvac.TEST_ARRAY_32)
    system_sho_label = b'Signal_ZKGroup_20200424_Constant_UidEncryption_SystemParams_Generate'
    private_params_label = b'Test_Uid_Encryption'
    hashing_label = b'Signal_ZKGroup_20200424_UID_CalcM1'

    assert kvac.EncryptionSystemParams.generate(system_sho_label) \
        == kvac.EncryptionSystemParams.from_bytes(bytes(UID_SYSTEM_HARDCODED))

    key_pair = kvac.KeyPair.derive_from(system_sho_label, master_key, private_params_label,
                                        hashing_label)

    # Convert key pair to bytes and check if they are the same after conversion
    key_pair_bytes = bytes(key_pair)
    key_pair2 = kvac.KeyPair.from_bytes(key_pair_bytes)
    assert key_pair == key_pair2

    # Generate m and encrypt it
    m = bytes(kvac.TEST_ARRAY_16)
    ciphertext = key_pair.encrypt(m)

    # Convert ciphertext to bytes and check if they are the same after conversion and if it is equal
    # to the hardcoded value
    ciphertext_bytes = bytes(ciphertext)
    assert len(ciphertext_bytes) == 64
    ciphertext2 = kvac.Ciphertext.from_bytes(ciphertext_bytes)
    assert ciphertext == ciphertext2
    assert ciphertext_bytes == bytes([
        0xf8, 0x9e, 0xe7, 0x70, 0x5a, 0x66, 0x3, 0x6b, 0x90, 0x8d, 0xb8, 0x84, 0x21,
        0x1b, 0x77, 0x3a, 0xc5, 0x43, 0xee, 0x35, 0xc4, 0xa3, 0x8, 0x62, 0x20, 0xfc,
        0x3e, 0x1e, 0x35, 0xb4, 0x23, 0x4c, 0xfa, 0x1d, 0x2e, 0xea, 0x2c, 0xc2, 0xf4,
        0xb4, 0xc4, 0x2c, 0xff, 0x39, 0xa9, 0xdc, 0xeb, 0x57, 0x29, 0x3b, 0x5f, 0x87,
        0x70, 0xca, 0x60, 0xf9, 0xe9, 0xb7, 0x44, 0x47, 0xbf, 0xd3, 0xbd, 0x3d,
    ])

    # Decrypt the ciphertext and check if it is the same as the original uid
    plaintext = key_pair.decrypt(ciphertext2)
    assert plaintext == m
